/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.47
 * Generated at: 2020-02-14 08:00:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.statistics.visit;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class time_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.4.1.js\"></script>\r\n");
      out.write("<title>외웟</title>\r\n");
      out.write("<!--Load the AJAX API-->\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"https://www.gstatic.com/charts/loader.js\"></script>\r\n");
      out.write("<!-- <link rel=\"stylesheet\" href=\"css/chart.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/left-menubar.css\"> -->\r\n");
      out.write("<style>\r\n");
      out.write("/* 전체 */\r\n");
      out.write("body {\r\n");
      out.write("\tfont-family: \"Open Sans\", Helvetica Neue, Helvetica, Arial, sans-serif;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 메뉴바 숨기기 */\r\n");
      out.write(".hide {\r\n");
      out.write("\tdisplay: none;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../../common/menubar.jsp", out, false);
      out.write('\r');
      out.write('\n');
      out.write('	');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../../common/left-menubar.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<div class=\"table\">\r\n");
      out.write("\t\t<div id=\"chart_div\" style=\"width: 1300px; height: 600px\">\r\n");
      out.write("\t\t\t<script>\r\n");
      out.write("      google.charts.load('current', { packages: ['corechart', 'bar'] });\r\n");
      out.write("      google.charts.setOnLoadCallback(drawAxisTickColors);\r\n");
      out.write("\r\n");
      out.write("      function drawAxisTickColors() {\r\n");
      out.write("        var data = new google.visualization.DataTable();\r\n");
      out.write("        var data = new google.visualization.DataTable();\r\n");
      out.write("        data.addColumn('string', 'Element');\r\n");
      out.write("        data.addColumn('number', 'Percentage');\r\n");
      out.write("        data.addRows([\r\n");
      out.write("          ['1\\n시간', 78],\r\n");
      out.write("          ['2\\n시간', 21],\r\n");
      out.write("          ['3\\n시간', 55],\r\n");
      out.write("          ['4\\n시간', 78],\r\n");
      out.write("          ['5\\n시간', 21],\r\n");
      out.write("          ['6\\n시간', 55],\r\n");
      out.write("          ['7\\n시간', 78],\r\n");
      out.write("          ['8\\n시간', 21],\r\n");
      out.write("          ['9\\n시간', 55],\r\n");
      out.write("          ['10시간', 78],\r\n");
      out.write("          ['11시간', 21],\r\n");
      out.write("          ['12시간', 55],\r\n");
      out.write("          ['13시간', 78],\r\n");
      out.write("          ['14시간', 21],\r\n");
      out.write("          ['15시간', 55],\r\n");
      out.write("          ['16시간', 78],\r\n");
      out.write("          ['17시간', 21],\r\n");
      out.write("          ['18시간', 55],\r\n");
      out.write("          ['19시간', 78],\r\n");
      out.write("          ['20시간', 21],\r\n");
      out.write("          ['21시간', 55],\r\n");
      out.write("          ['22시간', 78],\r\n");
      out.write("          ['23시간', 21],\r\n");
      out.write("          ['24시간', 55],\r\n");
      out.write("        ]);\r\n");
      out.write("        var options = {\r\n");
      out.write("          title: '시간자별 방문내역',\r\n");
      out.write("          backgroundColor: \"whitesmoke\",\r\n");
      out.write("          focusTarget: 'category',\r\n");
      out.write("          hAxis: {\r\n");
      out.write("            title: 'Time of Day',\r\n");
      out.write("            format: 'dd',\r\n");
      out.write("            viewWindow: {\r\n");
      out.write("              //   min: [7, 0, 0],\r\n");
      out.write("              //   max: [37, 30, 30]\r\n");
      out.write("            },\r\n");
      out.write("            textStyle: {\r\n");
      out.write("              fontSize: 14,\r\n");
      out.write("              color: '#053061',\r\n");
      out.write("              bold: true,\r\n");
      out.write("              italic: false,\r\n");
      out.write("            },\r\n");
      out.write("            titleTextStyle: {\r\n");
      out.write("              fontSize: 18,\r\n");
      out.write("              color: '#053061',\r\n");
      out.write("              bold: true,\r\n");
      out.write("              italic: false\r\n");
      out.write("            },\r\n");
      out.write("            gridlines: { count: 24 }\r\n");
      out.write("          },\r\n");
      out.write("          vAxis: {\r\n");
      out.write("            textStyle: {\r\n");
      out.write("              fontSize: 18,\r\n");
      out.write("              color: '#67055f',\r\n");
      out.write("              bold: false,\r\n");
      out.write("              italic: false\r\n");
      out.write("            },\r\n");
      out.write("            titleTextStyle: {\r\n");
      out.write("              fontSize: 18,\r\n");
      out.write("              color: '#67055f',\r\n");
      out.write("              bold: true,\r\n");
      out.write("              italic: false\r\n");
      out.write("            }\r\n");
      out.write("          }\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        var chart = new google.visualization.ColumnChart(document.getElementById('chart_div'));\r\n");
      out.write("        chart.draw(data, options);\r\n");
      out.write("      }\r\n");
      out.write("    </script>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t<table class=\"fixed_headers\">\r\n");
      out.write("\t\t\t<thead>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th>Name</th>\r\n");
      out.write("\t\t\t\t\t<th>Color</th>\r\n");
      out.write("\t\t\t\t\t<th>Description</th>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t</thead>\r\n");
      out.write("\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td>Apple</td>\r\n");
      out.write("\t\t\t\t\t<td>Red</td>\r\n");
      out.write("\t\t\t\t\t<td>These are red.</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td>Pear</td>\r\n");
      out.write("\t\t\t\t\t<td>Green</td>\r\n");
      out.write("\t\t\t\t\t<td>These are green.</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td>Grape</td>\r\n");
      out.write("\t\t\t\t\t<td>Purple / Green</td>\r\n");
      out.write("\t\t\t\t\t<td>These are purple and green.</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td>Orange</td>\r\n");
      out.write("\t\t\t\t\t<td>Orange</td>\r\n");
      out.write("\t\t\t\t\t<td>These are orange.</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td>Banana</td>\r\n");
      out.write("\t\t\t\t\t<td>Yellow</td>\r\n");
      out.write("\t\t\t\t\t<td>These are yellow.</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t</tbody>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
